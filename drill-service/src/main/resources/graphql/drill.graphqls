type sQuery {
    getDrillById(drillId: String!): Drill
    getAllDrillsByWorkoutId(workoutId: String!): [Drill]
    getAllDrillsByUserId(userId: String!): [Drill]
}

type sMutation {
    createDrill(drillInput: DrillInput!): Drill
    updateDrill(shotsTakenModel: ShotsTakenInput!): Drill
}

input DrillInput {
    userId: String!
    workoutId: String!
    drillType: DrillType!
    isSingle: Boolean!
    status: DrillStatus!
}

input ShotsTakenInput {
    threePointLeftCorner: Int!
    threePointRightCorner: Int!
    threePointLeftWing: Int!
    threePointRightWing: Int!
    threePointMiddle: Int!
    twoPointLeftCorner: Int!
    twoPointRightCorner: Int!
    twoPointLeftWing: Int!
    twoPointRightWing: Int!
    twoPointMiddle: Int!
}

enum DrillTypee {
    TWO_BALL_DRILLS
    CONE_DRILLS
    CROSSOVERS
    CHANGE_OF_SPEED
    CHANGE_OF_DIRECTION
    CATCH_AND_SHOT
    FIVE_STAR_DRILL
    DRIBBLE_PULL_UPS
    LEFT_HAND_LAYUPS
    RIGHT_HAND_LAYUPS
    CONTACT_FINISHES
    FLOATERS
    PICK_N_ROLL
    DOWN_HILL_DRIVES
    SHOTS_OFF_OF_SCREENS
    SPRINTS
    HILL_RUNS
    SAND_PIT
    UPPER_BODY
    LOWER_BODY
    JUMPING
    EXPLOSIVENESS
    LADDER_DRILLS
    WALKING_STRETCHES
    STATIC_STRETCHES
}

enum DrillStatus {
    CREATED,
    IN_PROGRESS,
    COMPLETED,
    FAILED
}

type Drill {
    drillId: String!
    workoutId: String!
    userId: String!
    drillType: DrillType!
    isSingle: Boolean!
    shotsTaken: ShotsTaken
    status: DrillStatus!
}

type ShotsTaken {
    threePointLeftCorner: Int!
    threePointRightCorner: Int!
    threePointLeftWing: Int!
    threePointRightWing: Int!
    threePointMiddle: Int!
    twoPointLeftCorner: Int!
    twoPointRightCorner: Int!
    twoPointLeftWing: Int!
    twoPointRightWing: Int!
    twoPointMiddle: Int!
}